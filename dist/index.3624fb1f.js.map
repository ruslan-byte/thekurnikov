{"mappings":"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","sources":["<anon>","core/music.js","node_modules/howler/dist/howler.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $f89d8ffbdc18f2ab$export$c9d39ca3bcd93abb;\nvar $f89d8ffbdc18f2ab$export$b791fe48eec8032a;\n/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */ (function() {\n    \"use strict\";\n    /** Global Methods **/ /***************************************************************************/ /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */ var HowlerGlobal1 = function() {\n        this.init();\n    };\n    HowlerGlobal1.prototype = {\n        /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */ init: function() {\n            var self = this || Howler1;\n            // Create a global ID counter.\n            self._counter = 1000;\n            // Pool of unlocked HTML5 Audio objects.\n            self._html5AudioPool = [];\n            self.html5PoolSize = 10;\n            // Internal properties.\n            self._codecs = {};\n            self._howls = [];\n            self._muted = false;\n            self._volume = 1;\n            self._canPlayEvent = \"canplaythrough\";\n            self._navigator = typeof window !== \"undefined\" && window.navigator ? window.navigator : null;\n            // Public properties.\n            self.masterGain = null;\n            self.noAudio = false;\n            self.usingWebAudio = true;\n            self.autoSuspend = true;\n            self.ctx = null;\n            // Set to false to disable the auto audio unlocker.\n            self.autoUnlock = true;\n            // Setup the various state values for global tracking.\n            self._setup();\n            return self;\n        },\n        /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */ volume: function(vol) {\n            var self = this || Howler1;\n            vol = parseFloat(vol);\n            // If we don't have an AudioContext created yet, run the setup.\n            if (!self.ctx) setupAudioContext();\n            if (typeof vol !== \"undefined\" && vol >= 0 && vol <= 1) {\n                self._volume = vol;\n                // Don't update any of the nodes if we are muted.\n                if (self._muted) return self;\n                // When using Web Audio, we just need to adjust the master gain.\n                if (self.usingWebAudio) self.masterGain.gain.setValueAtTime(vol, Howler1.ctx.currentTime);\n                // Loop through and change volume for all HTML5 audio nodes.\n                for(var i = 0; i < self._howls.length; i++)if (!self._howls[i]._webAudio) {\n                    // Get all of the sounds in this Howl group.\n                    var ids = self._howls[i]._getSoundIds();\n                    // Loop through all sounds and change the volumes.\n                    for(var j = 0; j < ids.length; j++){\n                        var sound = self._howls[i]._soundById(ids[j]);\n                        if (sound && sound._node) sound._node.volume = sound._volume * vol;\n                    }\n                }\n                return self;\n            }\n            return self._volume;\n        },\n        /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */ mute: function(muted) {\n            var self = this || Howler1;\n            // If we don't have an AudioContext created yet, run the setup.\n            if (!self.ctx) setupAudioContext();\n            self._muted = muted;\n            // With Web Audio, we just need to mute the master gain.\n            if (self.usingWebAudio) self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler1.ctx.currentTime);\n            // Loop through and mute all HTML5 Audio nodes.\n            for(var i = 0; i < self._howls.length; i++)if (!self._howls[i]._webAudio) {\n                // Get all of the sounds in this Howl group.\n                var ids = self._howls[i]._getSoundIds();\n                // Loop through all sounds and mark the audio node as muted.\n                for(var j = 0; j < ids.length; j++){\n                    var sound = self._howls[i]._soundById(ids[j]);\n                    if (sound && sound._node) sound._node.muted = muted ? true : sound._muted;\n                }\n            }\n            return self;\n        },\n        /**\n     * Handle stopping all sounds globally.\n     */ stop: function() {\n            var self = this || Howler1;\n            // Loop through all Howls and stop them.\n            for(var i = 0; i < self._howls.length; i++)self._howls[i].stop();\n            return self;\n        },\n        /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */ unload: function() {\n            var self = this || Howler1;\n            for(var i = self._howls.length - 1; i >= 0; i--)self._howls[i].unload();\n            // Create a new AudioContext to make sure it is fully reset.\n            if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== \"undefined\") {\n                self.ctx.close();\n                self.ctx = null;\n                setupAudioContext();\n            }\n            return self;\n        },\n        /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */ codecs: function(ext) {\n            return (this || Howler1)._codecs[ext.replace(/^x-/, \"\")];\n        },\n        /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */ _setup: function() {\n            var self = this || Howler1;\n            // Keeps track of the suspend/resume state of the AudioContext.\n            self.state = self.ctx ? self.ctx.state || \"suspended\" : \"suspended\";\n            // Automatically begin the 30-second suspend process\n            self._autoSuspend();\n            // Check if audio is available.\n            if (!self.usingWebAudio) {\n                // No audio is available on this system if noAudio is set to true.\n                if (typeof Audio !== \"undefined\") try {\n                    var test = new Audio();\n                    // Check if the canplaythrough event is available.\n                    if (typeof test.oncanplaythrough === \"undefined\") self._canPlayEvent = \"canplay\";\n                } catch (e) {\n                    self.noAudio = true;\n                }\n                else self.noAudio = true;\n            }\n            // Test to make sure audio isn't disabled in Internet Explorer.\n            try {\n                var test = new Audio();\n                if (test.muted) self.noAudio = true;\n            } catch (e) {}\n            // Check for supported codecs.\n            if (!self.noAudio) self._setupCodecs();\n            return self;\n        },\n        /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */ _setupCodecs: function() {\n            var self = this || Howler1;\n            var audioTest = null;\n            // Must wrap in a try/catch because IE11 in server mode throws an error.\n            try {\n                audioTest = typeof Audio !== \"undefined\" ? new Audio() : null;\n            } catch (err) {\n                return self;\n            }\n            if (!audioTest || typeof audioTest.canPlayType !== \"function\") return self;\n            var mpegTest = audioTest.canPlayType(\"audio/mpeg;\").replace(/^no$/, \"\");\n            // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n            var ua = self._navigator ? self._navigator.userAgent : \"\";\n            var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n            var isOldOpera = checkOpera && parseInt(checkOpera[0].split(\"/\")[1], 10) < 33;\n            var checkSafari = ua.indexOf(\"Safari\") !== -1 && ua.indexOf(\"Chrome\") === -1;\n            var safariVersion = ua.match(/Version\\/(.*?) /);\n            var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;\n            self._codecs = {\n                mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType(\"audio/mp3;\").replace(/^no$/, \"\"))),\n                mpeg: !!mpegTest,\n                opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, \"\"),\n                ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\"),\n                oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\"),\n                wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType(\"audio/wav\")).replace(/^no$/, \"\"),\n                aac: !!audioTest.canPlayType(\"audio/aac;\").replace(/^no$/, \"\"),\n                caf: !!audioTest.canPlayType(\"audio/x-caf;\").replace(/^no$/, \"\"),\n                m4a: !!(audioTest.canPlayType(\"audio/x-m4a;\") || audioTest.canPlayType(\"audio/m4a;\") || audioTest.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                m4b: !!(audioTest.canPlayType(\"audio/x-m4b;\") || audioTest.canPlayType(\"audio/m4b;\") || audioTest.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                mp4: !!(audioTest.canPlayType(\"audio/x-mp4;\") || audioTest.canPlayType(\"audio/mp4;\") || audioTest.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, \"\")),\n                webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, \"\")),\n                dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, \"\"),\n                flac: !!(audioTest.canPlayType(\"audio/x-flac;\") || audioTest.canPlayType(\"audio/flac;\")).replace(/^no$/, \"\")\n            };\n            return self;\n        },\n        /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */ _unlockAudio: function() {\n            var self = this || Howler1;\n            // Only run this if Web Audio is supported and it hasn't already been unlocked.\n            if (self._audioUnlocked || !self.ctx) return;\n            self._audioUnlocked = false;\n            self.autoUnlock = false;\n            // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n            // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n            // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n            if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n                self._mobileUnloaded = true;\n                self.unload();\n            }\n            // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n            // http://stackoverflow.com/questions/24119684\n            self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n            // Call this method on touch start to create and play a buffer,\n            // then check if the audio actually played to determine if\n            // audio has now been unlocked on iOS, Android, etc.\n            var unlock = function(e) {\n                // Create a pool of unlocked HTML5 Audio objects that can\n                // be used for playing sounds without user interaction. HTML5\n                // Audio objects must be individually unlocked, as opposed\n                // to the WebAudio API which only needs a single activation.\n                // This must occur before WebAudio setup or the source.onended\n                // event will not fire.\n                while(self._html5AudioPool.length < self.html5PoolSize)try {\n                    var audioNode = new Audio();\n                    // Mark this Audio object as unlocked to ensure it can get returned\n                    // to the unlocked pool when released.\n                    audioNode._unlocked = true;\n                    // Add the audio node to the pool.\n                    self._releaseHtml5Audio(audioNode);\n                } catch (e) {\n                    self.noAudio = true;\n                    break;\n                }\n                // Loop through any assigned audio nodes and unlock them.\n                for(var i = 0; i < self._howls.length; i++)if (!self._howls[i]._webAudio) {\n                    // Get all of the sounds in this Howl group.\n                    var ids = self._howls[i]._getSoundIds();\n                    // Loop through all sounds and unlock the audio nodes.\n                    for(var j = 0; j < ids.length; j++){\n                        var sound = self._howls[i]._soundById(ids[j]);\n                        if (sound && sound._node && !sound._node._unlocked) {\n                            sound._node._unlocked = true;\n                            sound._node.load();\n                        }\n                    }\n                }\n                // Fix Android can not play in suspend state.\n                self._autoResume();\n                // Create an empty buffer.\n                var source = self.ctx.createBufferSource();\n                source.buffer = self._scratchBuffer;\n                source.connect(self.ctx.destination);\n                // Play the empty buffer.\n                if (typeof source.start === \"undefined\") source.noteOn(0);\n                else source.start(0);\n                // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n                if (typeof self.ctx.resume === \"function\") self.ctx.resume();\n                // Setup a timeout to check that we are unlocked on the next event loop.\n                source.onended = function() {\n                    source.disconnect(0);\n                    // Update the unlocked state and prevent this check from happening again.\n                    self._audioUnlocked = true;\n                    // Remove the touch start listener.\n                    document.removeEventListener(\"touchstart\", unlock, true);\n                    document.removeEventListener(\"touchend\", unlock, true);\n                    document.removeEventListener(\"click\", unlock, true);\n                    document.removeEventListener(\"keydown\", unlock, true);\n                    // Let all sounds know that audio has been unlocked.\n                    for(var i = 0; i < self._howls.length; i++)self._howls[i]._emit(\"unlock\");\n                };\n            };\n            // Setup a touch start listener to attempt an unlock in.\n            document.addEventListener(\"touchstart\", unlock, true);\n            document.addEventListener(\"touchend\", unlock, true);\n            document.addEventListener(\"click\", unlock, true);\n            document.addEventListener(\"keydown\", unlock, true);\n            return self;\n        },\n        /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */ _obtainHtml5Audio: function() {\n            var self = this || Howler1;\n            // Return the next object from the pool if one exists.\n            if (self._html5AudioPool.length) return self._html5AudioPool.pop();\n            //.Check if the audio is locked and throw a warning.\n            var testPlay = new Audio().play();\n            if (testPlay && typeof Promise !== \"undefined\" && (testPlay instanceof Promise || typeof testPlay.then === \"function\")) testPlay.catch(function() {\n                console.warn(\"HTML5 Audio pool exhausted, returning potentially locked audio object.\");\n            });\n            return new Audio();\n        },\n        /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */ _releaseHtml5Audio: function(audio) {\n            var self = this || Howler1;\n            // Don't add audio to the pool if we don't know if it has been unlocked.\n            if (audio._unlocked) self._html5AudioPool.push(audio);\n            return self;\n        },\n        /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */ _autoSuspend: function() {\n            var self = this;\n            if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === \"undefined\" || !Howler1.usingWebAudio) return;\n            // Check if any sounds are playing.\n            for(var i = 0; i < self._howls.length; i++){\n                if (self._howls[i]._webAudio) for(var j = 0; j < self._howls[i]._sounds.length; j++){\n                    if (!self._howls[i]._sounds[j]._paused) return self;\n                }\n            }\n            if (self._suspendTimer) clearTimeout(self._suspendTimer);\n            // If no sound has played after 30 seconds, suspend the context.\n            self._suspendTimer = setTimeout(function() {\n                if (!self.autoSuspend) return;\n                self._suspendTimer = null;\n                self.state = \"suspending\";\n                // Handle updating the state of the audio context after suspending.\n                var handleSuspension = function() {\n                    self.state = \"suspended\";\n                    if (self._resumeAfterSuspend) {\n                        delete self._resumeAfterSuspend;\n                        self._autoResume();\n                    }\n                };\n                // Either the state gets suspended or it is interrupted.\n                // Either way, we need to update the state to suspended.\n                self.ctx.suspend().then(handleSuspension, handleSuspension);\n            }, 30000);\n            return self;\n        },\n        /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */ _autoResume: function() {\n            var self = this;\n            if (!self.ctx || typeof self.ctx.resume === \"undefined\" || !Howler1.usingWebAudio) return;\n            if (self.state === \"running\" && self.ctx.state !== \"interrupted\" && self._suspendTimer) {\n                clearTimeout(self._suspendTimer);\n                self._suspendTimer = null;\n            } else if (self.state === \"suspended\" || self.state === \"running\" && self.ctx.state === \"interrupted\") {\n                self.ctx.resume().then(function() {\n                    self.state = \"running\";\n                    // Emit to all Howls that the audio has resumed.\n                    for(var i = 0; i < self._howls.length; i++)self._howls[i]._emit(\"resume\");\n                });\n                if (self._suspendTimer) {\n                    clearTimeout(self._suspendTimer);\n                    self._suspendTimer = null;\n                }\n            } else if (self.state === \"suspending\") self._resumeAfterSuspend = true;\n            return self;\n        }\n    };\n    // Setup the global audio controller.\n    var Howler1 = new HowlerGlobal1();\n    /** Group Methods **/ /***************************************************************************/ /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */ var Howl1 = function(o) {\n        var self = this;\n        // Throw an error if no source is provided.\n        if (!o.src || o.src.length === 0) {\n            console.error(\"An array of source files must be passed with any new Howl.\");\n            return;\n        }\n        self.init(o);\n    };\n    Howl1.prototype = {\n        /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */ init: function(o) {\n            var self = this;\n            // If we don't have an AudioContext created yet, run the setup.\n            if (!Howler1.ctx) setupAudioContext();\n            // Setup user-defined default properties.\n            self._autoplay = o.autoplay || false;\n            self._format = typeof o.format !== \"string\" ? o.format : [\n                o.format\n            ];\n            self._html5 = o.html5 || false;\n            self._muted = o.mute || false;\n            self._loop = o.loop || false;\n            self._pool = o.pool || 5;\n            self._preload = typeof o.preload === \"boolean\" || o.preload === \"metadata\" ? o.preload : true;\n            self._rate = o.rate || 1;\n            self._sprite = o.sprite || {};\n            self._src = typeof o.src !== \"string\" ? o.src : [\n                o.src\n            ];\n            self._volume = o.volume !== undefined ? o.volume : 1;\n            self._xhr = {\n                method: o.xhr && o.xhr.method ? o.xhr.method : \"GET\",\n                headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n                withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n            };\n            // Setup all other default properties.\n            self._duration = 0;\n            self._state = \"unloaded\";\n            self._sounds = [];\n            self._endTimers = {};\n            self._queue = [];\n            self._playLock = false;\n            // Setup event listeners.\n            self._onend = o.onend ? [\n                {\n                    fn: o.onend\n                }\n            ] : [];\n            self._onfade = o.onfade ? [\n                {\n                    fn: o.onfade\n                }\n            ] : [];\n            self._onload = o.onload ? [\n                {\n                    fn: o.onload\n                }\n            ] : [];\n            self._onloaderror = o.onloaderror ? [\n                {\n                    fn: o.onloaderror\n                }\n            ] : [];\n            self._onplayerror = o.onplayerror ? [\n                {\n                    fn: o.onplayerror\n                }\n            ] : [];\n            self._onpause = o.onpause ? [\n                {\n                    fn: o.onpause\n                }\n            ] : [];\n            self._onplay = o.onplay ? [\n                {\n                    fn: o.onplay\n                }\n            ] : [];\n            self._onstop = o.onstop ? [\n                {\n                    fn: o.onstop\n                }\n            ] : [];\n            self._onmute = o.onmute ? [\n                {\n                    fn: o.onmute\n                }\n            ] : [];\n            self._onvolume = o.onvolume ? [\n                {\n                    fn: o.onvolume\n                }\n            ] : [];\n            self._onrate = o.onrate ? [\n                {\n                    fn: o.onrate\n                }\n            ] : [];\n            self._onseek = o.onseek ? [\n                {\n                    fn: o.onseek\n                }\n            ] : [];\n            self._onunlock = o.onunlock ? [\n                {\n                    fn: o.onunlock\n                }\n            ] : [];\n            self._onresume = [];\n            // Web Audio or HTML5 Audio?\n            self._webAudio = Howler1.usingWebAudio && !self._html5;\n            // Automatically try to enable audio.\n            if (typeof Howler1.ctx !== \"undefined\" && Howler1.ctx && Howler1.autoUnlock) Howler1._unlockAudio();\n            // Keep track of this Howl group in the global controller.\n            Howler1._howls.push(self);\n            // If they selected autoplay, add a play event to the load queue.\n            if (self._autoplay) self._queue.push({\n                event: \"play\",\n                action: function() {\n                    self.play();\n                }\n            });\n            // Load the source file unless otherwise specified.\n            if (self._preload && self._preload !== \"none\") self.load();\n            return self;\n        },\n        /**\n     * Load the audio file.\n     * @return {Howler}\n     */ load: function() {\n            var self = this;\n            var url = null;\n            // If no audio is available, quit immediately.\n            if (Howler1.noAudio) {\n                self._emit(\"loaderror\", null, \"No audio support.\");\n                return;\n            }\n            // Make sure our source is in an array.\n            if (typeof self._src === \"string\") self._src = [\n                self._src\n            ];\n            // Loop through the sources and pick the first one that is compatible.\n            for(var i = 0; i < self._src.length; i++){\n                var ext, str;\n                if (self._format && self._format[i]) // If an extension was specified, use that instead.\n                ext = self._format[i];\n                else {\n                    // Make sure the source is a string.\n                    str = self._src[i];\n                    if (typeof str !== \"string\") {\n                        self._emit(\"loaderror\", null, \"Non-string found in selected audio sources - ignoring.\");\n                        continue;\n                    }\n                    // Extract the file extension from the URL or base64 data URI.\n                    ext = /^data:audio\\/([^;,]+);/i.exec(str);\n                    if (!ext) ext = /\\.([^.]+)$/.exec(str.split(\"?\", 1)[0]);\n                    if (ext) ext = ext[1].toLowerCase();\n                }\n                // Log a warning if no extension was found.\n                if (!ext) console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n                // Check if this extension is available.\n                if (ext && Howler1.codecs(ext)) {\n                    url = self._src[i];\n                    break;\n                }\n            }\n            if (!url) {\n                self._emit(\"loaderror\", null, \"No codec support for selected audio sources.\");\n                return;\n            }\n            self._src = url;\n            self._state = \"loading\";\n            // If the hosting page is HTTPS and the source isn't,\n            // drop down to HTML5 Audio to avoid Mixed Content errors.\n            if (window.location.protocol === \"https:\" && url.slice(0, 5) === \"http:\") {\n                self._html5 = true;\n                self._webAudio = false;\n            }\n            // Create a new sound object and add it to the pool.\n            new Sound1(self);\n            // Load and decode the audio data for playback.\n            if (self._webAudio) loadBuffer(self);\n            return self;\n        },\n        /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */ play: function(sprite, internal) {\n            var self = this;\n            var id = null;\n            // Determine if a sprite, sound id or nothing was passed\n            if (typeof sprite === \"number\") {\n                id = sprite;\n                sprite = null;\n            } else if (typeof sprite === \"string\" && self._state === \"loaded\" && !self._sprite[sprite]) // If the passed sprite doesn't exist, do nothing.\n            return null;\n            else if (typeof sprite === \"undefined\") {\n                // Use the default sound sprite (plays the full audio length).\n                sprite = \"__default\";\n                // Check if there is a single paused sound that isn't ended.\n                // If there is, play that sound. If not, continue as usual.\n                if (!self._playLock) {\n                    var num = 0;\n                    for(var i = 0; i < self._sounds.length; i++)if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n                        num++;\n                        id = self._sounds[i]._id;\n                    }\n                    if (num === 1) sprite = null;\n                    else id = null;\n                }\n            }\n            // Get the selected node, or get one from the pool.\n            var sound = id ? self._soundById(id) : self._inactiveSound();\n            // If the sound doesn't exist, do nothing.\n            if (!sound) return null;\n            // Select the sprite definition.\n            if (id && !sprite) sprite = sound._sprite || \"__default\";\n            // If the sound hasn't loaded, we must wait to get the audio's duration.\n            // We also need to wait to make sure we don't run into race conditions with\n            // the order of function calls.\n            if (self._state !== \"loaded\") {\n                // Set the sprite value on this sound.\n                sound._sprite = sprite;\n                // Mark this sound as not ended in case another sound is played before this one loads.\n                sound._ended = false;\n                // Add the sound to the queue to be played on load.\n                var soundId = sound._id;\n                self._queue.push({\n                    event: \"play\",\n                    action: function() {\n                        self.play(soundId);\n                    }\n                });\n                return soundId;\n            }\n            // Don't play the sound if an id was passed and it is already playing.\n            if (id && !sound._paused) {\n                // Trigger the play event, in order to keep iterating through queue.\n                if (!internal) self._loadQueue(\"play\");\n                return sound._id;\n            }\n            // Make sure the AudioContext isn't suspended, and resume it if it is.\n            if (self._webAudio) Howler1._autoResume();\n            // Determine how long to play for and where to start playing.\n            var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n            var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n            var timeout = duration * 1000 / Math.abs(sound._rate);\n            var start = self._sprite[sprite][0] / 1000;\n            var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n            sound._sprite = sprite;\n            // Mark the sound as ended instantly so that this async playback\n            // doesn't get grabbed by another call to play while this one waits to start.\n            sound._ended = false;\n            // Update the parameters of the sound.\n            var setParams = function() {\n                sound._paused = false;\n                sound._seek = seek;\n                sound._start = start;\n                sound._stop = stop;\n                sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n            };\n            // End the sound instantly if seek is at the end.\n            if (seek >= stop) {\n                self._ended(sound);\n                return;\n            }\n            // Begin the actual playback.\n            var node = sound._node;\n            if (self._webAudio) {\n                // Fire this when the sound is ready to play to begin Web Audio playback.\n                var playWebAudio = function() {\n                    self._playLock = false;\n                    setParams();\n                    self._refreshBuffer(sound);\n                    // Setup the playback params.\n                    var vol = sound._muted || self._muted ? 0 : sound._volume;\n                    node.gain.setValueAtTime(vol, Howler1.ctx.currentTime);\n                    sound._playStart = Howler1.ctx.currentTime;\n                    // Play the sound using the supported method.\n                    if (typeof node.bufferSource.start === \"undefined\") sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n                    else sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n                    // Start a new timer if none is present.\n                    if (timeout !== Infinity) self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n                    if (!internal) setTimeout(function() {\n                        self._emit(\"play\", sound._id);\n                        self._loadQueue();\n                    }, 0);\n                };\n                if (Howler1.state === \"running\" && Howler1.ctx.state !== \"interrupted\") playWebAudio();\n                else {\n                    self._playLock = true;\n                    // Wait for the audio context to resume before playing.\n                    self.once(\"resume\", playWebAudio);\n                    // Cancel the end timer.\n                    self._clearTimer(sound._id);\n                }\n            } else {\n                // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n                var playHtml5 = function() {\n                    node.currentTime = seek;\n                    node.muted = sound._muted || self._muted || Howler1._muted || node.muted;\n                    node.volume = sound._volume * Howler1.volume();\n                    node.playbackRate = sound._rate;\n                    // Some browsers will throw an error if this is called without user interaction.\n                    try {\n                        var play = node.play();\n                        // Support older browsers that don't support promises, and thus don't have this issue.\n                        if (play && typeof Promise !== \"undefined\" && (play instanceof Promise || typeof play.then === \"function\")) {\n                            // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n                            self._playLock = true;\n                            // Set param values immediately.\n                            setParams();\n                            // Releases the lock and executes queued actions.\n                            play.then(function() {\n                                self._playLock = false;\n                                node._unlocked = true;\n                                if (!internal) self._emit(\"play\", sound._id);\n                                else self._loadQueue();\n                            }).catch(function() {\n                                self._playLock = false;\n                                self._emit(\"playerror\", sound._id, \"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.\");\n                                // Reset the ended and paused values.\n                                sound._ended = true;\n                                sound._paused = true;\n                            });\n                        } else if (!internal) {\n                            self._playLock = false;\n                            setParams();\n                            self._emit(\"play\", sound._id);\n                        }\n                        // Setting rate before playing won't work in IE, so we set it again here.\n                        node.playbackRate = sound._rate;\n                        // If the node is still paused, then we can assume there was a playback issue.\n                        if (node.paused) {\n                            self._emit(\"playerror\", sound._id, \"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.\");\n                            return;\n                        }\n                        // Setup the end timer on sprites or listen for the ended event.\n                        if (sprite !== \"__default\" || sound._loop) self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n                        else {\n                            self._endTimers[sound._id] = function() {\n                                // Fire ended on this audio node.\n                                self._ended(sound);\n                                // Clear this listener.\n                                node.removeEventListener(\"ended\", self._endTimers[sound._id], false);\n                            };\n                            node.addEventListener(\"ended\", self._endTimers[sound._id], false);\n                        }\n                    } catch (err) {\n                        self._emit(\"playerror\", sound._id, err);\n                    }\n                };\n                // If this is streaming audio, make sure the src is set and load again.\n                if (node.src === \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\") {\n                    node.src = self._src;\n                    node.load();\n                }\n                // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n                var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler1._navigator.isCocoonJS;\n                if (node.readyState >= 3 || loadedNoReadyState) playHtml5();\n                else {\n                    self._playLock = true;\n                    self._state = \"loading\";\n                    var listener = function() {\n                        self._state = \"loaded\";\n                        // Begin playback.\n                        playHtml5();\n                        // Clear this listener.\n                        node.removeEventListener(Howler1._canPlayEvent, listener, false);\n                    };\n                    node.addEventListener(Howler1._canPlayEvent, listener, false);\n                    // Cancel the end timer.\n                    self._clearTimer(sound._id);\n                }\n            }\n            return sound._id;\n        },\n        /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */ pause: function(id) {\n            var self = this;\n            // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"pause\",\n                    action: function() {\n                        self.pause(id);\n                    }\n                });\n                return self;\n            }\n            // If no id is passed, get all ID's to be paused.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Clear the end timer.\n                self._clearTimer(ids[i]);\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                if (sound && !sound._paused) {\n                    // Reset the seek position.\n                    sound._seek = self.seek(ids[i]);\n                    sound._rateSeek = 0;\n                    sound._paused = true;\n                    // Stop currently running fades.\n                    self._stopFade(ids[i]);\n                    if (sound._node) {\n                        if (self._webAudio) {\n                            // Make sure the sound has been created.\n                            if (!sound._node.bufferSource) continue;\n                            if (typeof sound._node.bufferSource.stop === \"undefined\") sound._node.bufferSource.noteOff(0);\n                            else sound._node.bufferSource.stop(0);\n                            // Clean up the buffer source.\n                            self._cleanBuffer(sound._node);\n                        } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) sound._node.pause();\n                    }\n                }\n                // Fire the pause event, unless `true` is passed as the 2nd argument.\n                if (!arguments[1]) self._emit(\"pause\", sound ? sound._id : null);\n            }\n            return self;\n        },\n        /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */ stop: function(id, internal) {\n            var self = this;\n            // If the sound hasn't loaded, add it to the load queue to stop when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"stop\",\n                    action: function() {\n                        self.stop(id);\n                    }\n                });\n                return self;\n            }\n            // If no id is passed, get all ID's to be stopped.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Clear the end timer.\n                self._clearTimer(ids[i]);\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                if (sound) {\n                    // Reset the seek position.\n                    sound._seek = sound._start || 0;\n                    sound._rateSeek = 0;\n                    sound._paused = true;\n                    sound._ended = true;\n                    // Stop currently running fades.\n                    self._stopFade(ids[i]);\n                    if (sound._node) {\n                        if (self._webAudio) // Make sure the sound's AudioBufferSourceNode has been created.\n                        {\n                            if (sound._node.bufferSource) {\n                                if (typeof sound._node.bufferSource.stop === \"undefined\") sound._node.bufferSource.noteOff(0);\n                                else sound._node.bufferSource.stop(0);\n                                // Clean up the buffer source.\n                                self._cleanBuffer(sound._node);\n                            }\n                        } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n                            sound._node.currentTime = sound._start || 0;\n                            sound._node.pause();\n                            // If this is a live stream, stop download once the audio is stopped.\n                            if (sound._node.duration === Infinity) self._clearSound(sound._node);\n                        }\n                    }\n                    if (!internal) self._emit(\"stop\", sound._id);\n                }\n            }\n            return self;\n        },\n        /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */ mute: function(muted, id) {\n            var self = this;\n            // If the sound hasn't loaded, add it to the load queue to mute when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"mute\",\n                    action: function() {\n                        self.mute(muted, id);\n                    }\n                });\n                return self;\n            }\n            // If applying mute/unmute to all sounds, update the group's value.\n            if (typeof id === \"undefined\") {\n                if (typeof muted === \"boolean\") self._muted = muted;\n                else return self._muted;\n            }\n            // If no id is passed, get all ID's to be muted.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                if (sound) {\n                    sound._muted = muted;\n                    // Cancel active fade and set the volume to the end value.\n                    if (sound._interval) self._stopFade(sound._id);\n                    if (self._webAudio && sound._node) sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler1.ctx.currentTime);\n                    else if (sound._node) sound._node.muted = Howler1._muted ? true : muted;\n                    self._emit(\"mute\", sound._id);\n                }\n            }\n            return self;\n        },\n        /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */ volume: function() {\n            var self = this;\n            var args = arguments;\n            var vol, id;\n            // Determine the values based on arguments.\n            if (args.length === 0) // Return the value of the groups' volume.\n            return self._volume;\n            else if (args.length === 1 || args.length === 2 && typeof args[1] === \"undefined\") {\n                // First check if this is an ID, and if not, assume it is a new volume.\n                var ids = self._getSoundIds();\n                var index = ids.indexOf(args[0]);\n                if (index >= 0) id = parseInt(args[0], 10);\n                else vol = parseFloat(args[0]);\n            } else if (args.length >= 2) {\n                vol = parseFloat(args[0]);\n                id = parseInt(args[1], 10);\n            }\n            // Update the volume or return the current volume.\n            var sound;\n            if (typeof vol !== \"undefined\" && vol >= 0 && vol <= 1) {\n                // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n                if (self._state !== \"loaded\" || self._playLock) {\n                    self._queue.push({\n                        event: \"volume\",\n                        action: function() {\n                            self.volume.apply(self, args);\n                        }\n                    });\n                    return self;\n                }\n                // Set the group volume.\n                if (typeof id === \"undefined\") self._volume = vol;\n                // Update one or all volumes.\n                id = self._getSoundIds(id);\n                for(var i = 0; i < id.length; i++){\n                    // Get the sound.\n                    sound = self._soundById(id[i]);\n                    if (sound) {\n                        sound._volume = vol;\n                        // Stop currently running fades.\n                        if (!args[2]) self._stopFade(id[i]);\n                        if (self._webAudio && sound._node && !sound._muted) sound._node.gain.setValueAtTime(vol, Howler1.ctx.currentTime);\n                        else if (sound._node && !sound._muted) sound._node.volume = vol * Howler1.volume();\n                        self._emit(\"volume\", sound._id);\n                    }\n                }\n            } else {\n                sound = id ? self._soundById(id) : self._sounds[0];\n                return sound ? sound._volume : 0;\n            }\n            return self;\n        },\n        /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */ fade: function(from, to, len, id) {\n            var self = this;\n            // If the sound hasn't loaded, add it to the load queue to fade when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"fade\",\n                    action: function() {\n                        self.fade(from, to, len, id);\n                    }\n                });\n                return self;\n            }\n            // Make sure the to/from/len values are numbers.\n            from = Math.min(Math.max(0, parseFloat(from)), 1);\n            to = Math.min(Math.max(0, parseFloat(to)), 1);\n            len = parseFloat(len);\n            // Set the volume to the start position.\n            self.volume(from, id);\n            // Fade the volume of one or all sounds.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                // Create a linear fade or fall back to timeouts with HTML5 Audio.\n                if (sound) {\n                    // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n                    if (!id) self._stopFade(ids[i]);\n                    // If we are using Web Audio, let the native methods do the actual fade.\n                    if (self._webAudio && !sound._muted) {\n                        var currentTime = Howler1.ctx.currentTime;\n                        var end = currentTime + len / 1000;\n                        sound._volume = from;\n                        sound._node.gain.setValueAtTime(from, currentTime);\n                        sound._node.gain.linearRampToValueAtTime(to, end);\n                    }\n                    self._startFadeInterval(sound, from, to, len, ids[i], typeof id === \"undefined\");\n                }\n            }\n            return self;\n        },\n        /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */ _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n            var self = this;\n            var vol = from;\n            var diff = to - from;\n            var steps = Math.abs(diff / 0.01);\n            var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n            var lastTick = Date.now();\n            // Store the value being faded to.\n            sound._fadeTo = to;\n            // Update the volume value on each interval tick.\n            sound._interval = setInterval(function() {\n                // Update the volume based on the time since the last tick.\n                var tick = (Date.now() - lastTick) / len;\n                lastTick = Date.now();\n                vol += diff * tick;\n                // Round to within 2 decimal points.\n                vol = Math.round(vol * 100) / 100;\n                // Make sure the volume is in the right bounds.\n                if (diff < 0) vol = Math.max(to, vol);\n                else vol = Math.min(to, vol);\n                // Change the volume.\n                if (self._webAudio) sound._volume = vol;\n                else self.volume(vol, sound._id, true);\n                // Set the group's volume.\n                if (isGroup) self._volume = vol;\n                // When the fade is complete, stop it and fire event.\n                if (to < from && vol <= to || to > from && vol >= to) {\n                    clearInterval(sound._interval);\n                    sound._interval = null;\n                    sound._fadeTo = null;\n                    self.volume(to, sound._id);\n                    self._emit(\"fade\", sound._id);\n                }\n            }, stepLen);\n        },\n        /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */ _stopFade: function(id) {\n            var self = this;\n            var sound = self._soundById(id);\n            if (sound && sound._interval) {\n                if (self._webAudio) sound._node.gain.cancelScheduledValues(Howler1.ctx.currentTime);\n                clearInterval(sound._interval);\n                sound._interval = null;\n                self.volume(sound._fadeTo, id);\n                sound._fadeTo = null;\n                self._emit(\"fade\", id);\n            }\n            return self;\n        },\n        /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */ loop: function() {\n            var self = this;\n            var args = arguments;\n            var loop, id, sound;\n            // Determine the values for loop and id.\n            if (args.length === 0) // Return the grou's loop value.\n            return self._loop;\n            else if (args.length === 1) {\n                if (typeof args[0] === \"boolean\") {\n                    loop = args[0];\n                    self._loop = loop;\n                } else {\n                    // Return this sound's loop value.\n                    sound = self._soundById(parseInt(args[0], 10));\n                    return sound ? sound._loop : false;\n                }\n            } else if (args.length === 2) {\n                loop = args[0];\n                id = parseInt(args[1], 10);\n            }\n            // If no id is passed, get all ID's to be looped.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                sound = self._soundById(ids[i]);\n                if (sound) {\n                    sound._loop = loop;\n                    if (self._webAudio && sound._node && sound._node.bufferSource) {\n                        sound._node.bufferSource.loop = loop;\n                        if (loop) {\n                            sound._node.bufferSource.loopStart = sound._start || 0;\n                            sound._node.bufferSource.loopEnd = sound._stop;\n                            // If playing, restart playback to ensure looping updates.\n                            if (self.playing(ids[i])) {\n                                self.pause(ids[i], true);\n                                self.play(ids[i], true);\n                            }\n                        }\n                    }\n                }\n            }\n            return self;\n        },\n        /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */ rate: function() {\n            var self = this;\n            var args = arguments;\n            var rate, id;\n            // Determine the values based on arguments.\n            if (args.length === 0) // We will simply return the current rate of the first node.\n            id = self._sounds[0]._id;\n            else if (args.length === 1) {\n                // First check if this is an ID, and if not, assume it is a new rate value.\n                var ids = self._getSoundIds();\n                var index = ids.indexOf(args[0]);\n                if (index >= 0) id = parseInt(args[0], 10);\n                else rate = parseFloat(args[0]);\n            } else if (args.length === 2) {\n                rate = parseFloat(args[0]);\n                id = parseInt(args[1], 10);\n            }\n            // Update the playback rate or return the current value.\n            var sound;\n            if (typeof rate === \"number\") {\n                // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n                if (self._state !== \"loaded\" || self._playLock) {\n                    self._queue.push({\n                        event: \"rate\",\n                        action: function() {\n                            self.rate.apply(self, args);\n                        }\n                    });\n                    return self;\n                }\n                // Set the group rate.\n                if (typeof id === \"undefined\") self._rate = rate;\n                // Update one or all volumes.\n                id = self._getSoundIds(id);\n                for(var i = 0; i < id.length; i++){\n                    // Get the sound.\n                    sound = self._soundById(id[i]);\n                    if (sound) {\n                        // Keep track of our position when the rate changed and update the playback\n                        // start position so we can properly adjust the seek position for time elapsed.\n                        if (self.playing(id[i])) {\n                            sound._rateSeek = self.seek(id[i]);\n                            sound._playStart = self._webAudio ? Howler1.ctx.currentTime : sound._playStart;\n                        }\n                        sound._rate = rate;\n                        // Change the playback rate.\n                        if (self._webAudio && sound._node && sound._node.bufferSource) sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler1.ctx.currentTime);\n                        else if (sound._node) sound._node.playbackRate = rate;\n                        // Reset the timers.\n                        var seek = self.seek(id[i]);\n                        var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n                        var timeout = duration * 1000 / Math.abs(sound._rate);\n                        // Start a new end timer if sound is already playing.\n                        if (self._endTimers[id[i]] || !sound._paused) {\n                            self._clearTimer(id[i]);\n                            self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n                        }\n                        self._emit(\"rate\", sound._id);\n                    }\n                }\n            } else {\n                sound = self._soundById(id);\n                return sound ? sound._rate : self._rate;\n            }\n            return self;\n        },\n        /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */ seek: function() {\n            var self = this;\n            var args = arguments;\n            var seek, id;\n            // Determine the values based on arguments.\n            if (args.length === 0) // We will simply return the current position of the first node.\n            {\n                if (self._sounds.length) id = self._sounds[0]._id;\n            } else if (args.length === 1) {\n                // First check if this is an ID, and if not, assume it is a new seek position.\n                var ids = self._getSoundIds();\n                var index = ids.indexOf(args[0]);\n                if (index >= 0) id = parseInt(args[0], 10);\n                else if (self._sounds.length) {\n                    id = self._sounds[0]._id;\n                    seek = parseFloat(args[0]);\n                }\n            } else if (args.length === 2) {\n                seek = parseFloat(args[0]);\n                id = parseInt(args[1], 10);\n            }\n            // If there is no ID, bail out.\n            if (typeof id === \"undefined\") return 0;\n            // If the sound hasn't loaded, add it to the load queue to seek when capable.\n            if (typeof seek === \"number\" && (self._state !== \"loaded\" || self._playLock)) {\n                self._queue.push({\n                    event: \"seek\",\n                    action: function() {\n                        self.seek.apply(self, args);\n                    }\n                });\n                return self;\n            }\n            // Get the sound.\n            var sound = self._soundById(id);\n            if (sound) {\n                if (typeof seek === \"number\" && seek >= 0) {\n                    // Pause the sound and update position for restarting playback.\n                    var playing = self.playing(id);\n                    if (playing) self.pause(id, true);\n                    // Move the position of the track and cancel timer.\n                    sound._seek = seek;\n                    sound._ended = false;\n                    self._clearTimer(id);\n                    // Update the seek position for HTML5 Audio.\n                    if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) sound._node.currentTime = seek;\n                    // Seek and emit when ready.\n                    var seekAndEmit = function() {\n                        // Restart the playback if the sound was playing.\n                        if (playing) self.play(id, true);\n                        self._emit(\"seek\", id);\n                    };\n                    // Wait for the play lock to be unset before emitting (HTML5 Audio).\n                    if (playing && !self._webAudio) {\n                        var emitSeek = function() {\n                            if (!self._playLock) seekAndEmit();\n                            else setTimeout(emitSeek, 0);\n                        };\n                        setTimeout(emitSeek, 0);\n                    } else seekAndEmit();\n                } else {\n                    if (self._webAudio) {\n                        var realTime = self.playing(id) ? Howler1.ctx.currentTime - sound._playStart : 0;\n                        var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n                        return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n                    } else return sound._node.currentTime;\n                }\n            }\n            return self;\n        },\n        /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */ playing: function(id) {\n            var self = this;\n            // Check the passed sound ID (if any).\n            if (typeof id === \"number\") {\n                var sound = self._soundById(id);\n                return sound ? !sound._paused : false;\n            }\n            // Otherwise, loop through all sounds and check if any are playing.\n            for(var i = 0; i < self._sounds.length; i++){\n                if (!self._sounds[i]._paused) return true;\n            }\n            return false;\n        },\n        /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */ duration: function(id) {\n            var self = this;\n            var duration = self._duration;\n            // If we pass an ID, get the sound and return the sprite length.\n            var sound = self._soundById(id);\n            if (sound) duration = self._sprite[sound._sprite][1] / 1000;\n            return duration;\n        },\n        /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */ state: function() {\n            return this._state;\n        },\n        /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */ unload: function() {\n            var self = this;\n            // Stop playing any active sounds.\n            var sounds = self._sounds;\n            for(var i = 0; i < sounds.length; i++){\n                // Stop the sound if it is currently playing.\n                if (!sounds[i]._paused) self.stop(sounds[i]._id);\n                // Remove the source or disconnect.\n                if (!self._webAudio) {\n                    // Set the source to 0-second silence to stop any downloading (except in IE).\n                    self._clearSound(sounds[i]._node);\n                    // Remove any event listeners.\n                    sounds[i]._node.removeEventListener(\"error\", sounds[i]._errorFn, false);\n                    sounds[i]._node.removeEventListener(Howler1._canPlayEvent, sounds[i]._loadFn, false);\n                    sounds[i]._node.removeEventListener(\"ended\", sounds[i]._endFn, false);\n                    // Release the Audio object back to the pool.\n                    Howler1._releaseHtml5Audio(sounds[i]._node);\n                }\n                // Empty out all of the nodes.\n                delete sounds[i]._node;\n                // Make sure all timers are cleared out.\n                self._clearTimer(sounds[i]._id);\n            }\n            // Remove the references in the global Howler object.\n            var index = Howler1._howls.indexOf(self);\n            if (index >= 0) Howler1._howls.splice(index, 1);\n            // Delete this sound from the cache (if no other Howl is using it).\n            var remCache = true;\n            for(i = 0; i < Howler1._howls.length; i++)if (Howler1._howls[i]._src === self._src || self._src.indexOf(Howler1._howls[i]._src) >= 0) {\n                remCache = false;\n                break;\n            }\n            if (cache && remCache) delete cache[self._src];\n            // Clear global errors.\n            Howler1.noAudio = false;\n            // Clear out `self`.\n            self._state = \"unloaded\";\n            self._sounds = [];\n            self = null;\n            return null;\n        },\n        /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */ on: function(event, fn, id, once) {\n            var self = this;\n            var events = self[\"_on\" + event];\n            if (typeof fn === \"function\") events.push(once ? {\n                id: id,\n                fn: fn,\n                once: once\n            } : {\n                id: id,\n                fn: fn\n            });\n            return self;\n        },\n        /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */ off: function(event, fn, id) {\n            var self = this;\n            var events = self[\"_on\" + event];\n            var i = 0;\n            // Allow passing just an event and ID.\n            if (typeof fn === \"number\") {\n                id = fn;\n                fn = null;\n            }\n            if (fn || id) // Loop through event store and remove the passed function.\n            for(i = 0; i < events.length; i++){\n                var isId = id === events[i].id;\n                if (fn === events[i].fn && isId || !fn && isId) {\n                    events.splice(i, 1);\n                    break;\n                }\n            }\n            else if (event) // Clear out all events of this type.\n            self[\"_on\" + event] = [];\n            else {\n                // Clear out all events of every type.\n                var keys = Object.keys(self);\n                for(i = 0; i < keys.length; i++)if (keys[i].indexOf(\"_on\") === 0 && Array.isArray(self[keys[i]])) self[keys[i]] = [];\n            }\n            return self;\n        },\n        /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */ once: function(event, fn, id) {\n            var self = this;\n            // Setup the event listener.\n            self.on(event, fn, id, 1);\n            return self;\n        },\n        /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */ _emit: function(event, id, msg) {\n            var self = this;\n            var events = self[\"_on\" + event];\n            // Loop through event store and fire all functions.\n            for(var i = events.length - 1; i >= 0; i--)// Only fire the listener if the correct ID is used.\n            if (!events[i].id || events[i].id === id || event === \"load\") {\n                setTimeout((function(fn) {\n                    fn.call(this, id, msg);\n                }).bind(self, events[i].fn), 0);\n                // If this event was setup with `once`, remove it.\n                if (events[i].once) self.off(event, events[i].fn, events[i].id);\n            }\n            // Pass the event type into load queue so that it can continue stepping.\n            self._loadQueue(event);\n            return self;\n        },\n        /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */ _loadQueue: function(event) {\n            var self = this;\n            if (self._queue.length > 0) {\n                var task = self._queue[0];\n                // Remove this task if a matching event was passed.\n                if (task.event === event) {\n                    self._queue.shift();\n                    self._loadQueue();\n                }\n                // Run the task if no event type is passed.\n                if (!event) task.action();\n            }\n            return self;\n        },\n        /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */ _ended: function(sound) {\n            var self = this;\n            var sprite = sound._sprite;\n            // If we are using IE and there was network latency we may be clipping\n            // audio before it completes playing. Lets check the node to make sure it\n            // believes it has completed, before ending the playback.\n            if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n                setTimeout(self._ended.bind(self, sound), 100);\n                return self;\n            }\n            // Should this sound loop?\n            var loop = !!(sound._loop || self._sprite[sprite][2]);\n            // Fire the ended event.\n            self._emit(\"end\", sound._id);\n            // Restart the playback for HTML5 Audio loop.\n            if (!self._webAudio && loop) self.stop(sound._id, true).play(sound._id);\n            // Restart this timer if on a Web Audio loop.\n            if (self._webAudio && loop) {\n                self._emit(\"play\", sound._id);\n                sound._seek = sound._start || 0;\n                sound._rateSeek = 0;\n                sound._playStart = Howler1.ctx.currentTime;\n                var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n                self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n            // Mark the node as paused.\n            if (self._webAudio && !loop) {\n                sound._paused = true;\n                sound._ended = true;\n                sound._seek = sound._start || 0;\n                sound._rateSeek = 0;\n                self._clearTimer(sound._id);\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n                // Attempt to auto-suspend AudioContext if no sounds are still playing.\n                Howler1._autoSuspend();\n            }\n            // When using a sprite, end the track.\n            if (!self._webAudio && !loop) self.stop(sound._id, true);\n            return self;\n        },\n        /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */ _clearTimer: function(id) {\n            var self = this;\n            if (self._endTimers[id]) {\n                // Clear the timeout or remove the ended listener.\n                if (typeof self._endTimers[id] !== \"function\") clearTimeout(self._endTimers[id]);\n                else {\n                    var sound = self._soundById(id);\n                    if (sound && sound._node) sound._node.removeEventListener(\"ended\", self._endTimers[id], false);\n                }\n                delete self._endTimers[id];\n            }\n            return self;\n        },\n        /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */ _soundById: function(id) {\n            var self = this;\n            // Loop through all sounds and find the one with this ID.\n            for(var i = 0; i < self._sounds.length; i++){\n                if (id === self._sounds[i]._id) return self._sounds[i];\n            }\n            return null;\n        },\n        /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */ _inactiveSound: function() {\n            var self = this;\n            self._drain();\n            // Find the first inactive node to recycle.\n            for(var i = 0; i < self._sounds.length; i++){\n                if (self._sounds[i]._ended) return self._sounds[i].reset();\n            }\n            // If no inactive node was found, create a new one.\n            return new Sound1(self);\n        },\n        /**\n     * Drain excess inactive sounds from the pool.\n     */ _drain: function() {\n            var self = this;\n            var limit = self._pool;\n            var cnt = 0;\n            var i = 0;\n            // If there are less sounds than the max pool size, we are done.\n            if (self._sounds.length < limit) return;\n            // Count the number of inactive sounds.\n            for(i = 0; i < self._sounds.length; i++)if (self._sounds[i]._ended) cnt++;\n            // Remove excess inactive sounds, going in reverse order.\n            for(i = self._sounds.length - 1; i >= 0; i--){\n                if (cnt <= limit) return;\n                if (self._sounds[i]._ended) {\n                    // Disconnect the audio source when using Web Audio.\n                    if (self._webAudio && self._sounds[i]._node) self._sounds[i]._node.disconnect(0);\n                    // Remove sounds until we have the pool size.\n                    self._sounds.splice(i, 1);\n                    cnt--;\n                }\n            }\n        },\n        /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */ _getSoundIds: function(id) {\n            var self = this;\n            if (typeof id === \"undefined\") {\n                var ids = [];\n                for(var i = 0; i < self._sounds.length; i++)ids.push(self._sounds[i]._id);\n                return ids;\n            } else return [\n                id\n            ];\n        },\n        /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */ _refreshBuffer: function(sound) {\n            var self = this;\n            // Setup the buffer source for playback.\n            sound._node.bufferSource = Howler1.ctx.createBufferSource();\n            sound._node.bufferSource.buffer = cache[self._src];\n            // Connect to the correct node.\n            if (sound._panner) sound._node.bufferSource.connect(sound._panner);\n            else sound._node.bufferSource.connect(sound._node);\n            // Setup looping and playback rate.\n            sound._node.bufferSource.loop = sound._loop;\n            if (sound._loop) {\n                sound._node.bufferSource.loopStart = sound._start || 0;\n                sound._node.bufferSource.loopEnd = sound._stop || 0;\n            }\n            sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler1.ctx.currentTime);\n            return self;\n        },\n        /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */ _cleanBuffer: function(node) {\n            var self = this;\n            var isIOS = Howler1._navigator && Howler1._navigator.vendor.indexOf(\"Apple\") >= 0;\n            if (Howler1._scratchBuffer && node.bufferSource) {\n                node.bufferSource.onended = null;\n                node.bufferSource.disconnect(0);\n                if (isIOS) try {\n                    node.bufferSource.buffer = Howler1._scratchBuffer;\n                } catch (e) {}\n            }\n            node.bufferSource = null;\n            return self;\n        },\n        /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */ _clearSound: function(node) {\n            var checkIE = /MSIE |Trident\\//.test(Howler1._navigator && Howler1._navigator.userAgent);\n            if (!checkIE) node.src = \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\";\n        }\n    };\n    /** Single Sound Methods **/ /***************************************************************************/ /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */ var Sound1 = function(howl) {\n        this._parent = howl;\n        this.init();\n    };\n    Sound1.prototype = {\n        /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */ init: function() {\n            var self = this;\n            var parent = self._parent;\n            // Setup the default parameters.\n            self._muted = parent._muted;\n            self._loop = parent._loop;\n            self._volume = parent._volume;\n            self._rate = parent._rate;\n            self._seek = 0;\n            self._paused = true;\n            self._ended = true;\n            self._sprite = \"__default\";\n            // Generate a unique ID for this sound.\n            self._id = ++Howler1._counter;\n            // Add itself to the parent's pool.\n            parent._sounds.push(self);\n            // Create the new node.\n            self.create();\n            return self;\n        },\n        /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */ create: function() {\n            var self = this;\n            var parent = self._parent;\n            var volume = Howler1._muted || self._muted || self._parent._muted ? 0 : self._volume;\n            if (parent._webAudio) {\n                // Create the gain node for controlling volume (the source will connect to this).\n                self._node = typeof Howler1.ctx.createGain === \"undefined\" ? Howler1.ctx.createGainNode() : Howler1.ctx.createGain();\n                self._node.gain.setValueAtTime(volume, Howler1.ctx.currentTime);\n                self._node.paused = true;\n                self._node.connect(Howler1.masterGain);\n            } else if (!Howler1.noAudio) {\n                // Get an unlocked Audio object from the pool.\n                self._node = Howler1._obtainHtml5Audio();\n                // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n                self._errorFn = self._errorListener.bind(self);\n                self._node.addEventListener(\"error\", self._errorFn, false);\n                // Listen for 'canplaythrough' event to let us know the sound is ready.\n                self._loadFn = self._loadListener.bind(self);\n                self._node.addEventListener(Howler1._canPlayEvent, self._loadFn, false);\n                // Listen for the 'ended' event on the sound to account for edge-case where\n                // a finite sound has a duration of Infinity.\n                self._endFn = self._endListener.bind(self);\n                self._node.addEventListener(\"ended\", self._endFn, false);\n                // Setup the new audio node.\n                self._node.src = parent._src;\n                self._node.preload = parent._preload === true ? \"auto\" : parent._preload;\n                self._node.volume = volume * Howler1.volume();\n                // Begin loading the source.\n                self._node.load();\n            }\n            return self;\n        },\n        /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */ reset: function() {\n            var self = this;\n            var parent = self._parent;\n            // Reset all of the parameters of this sound.\n            self._muted = parent._muted;\n            self._loop = parent._loop;\n            self._volume = parent._volume;\n            self._rate = parent._rate;\n            self._seek = 0;\n            self._rateSeek = 0;\n            self._paused = true;\n            self._ended = true;\n            self._sprite = \"__default\";\n            // Generate a new ID so that it isn't confused with the previous sound.\n            self._id = ++Howler1._counter;\n            return self;\n        },\n        /**\n     * HTML5 Audio error listener callback.\n     */ _errorListener: function() {\n            var self = this;\n            // Fire an error event and pass back the code.\n            self._parent._emit(\"loaderror\", self._id, self._node.error ? self._node.error.code : 0);\n            // Clear the event listener.\n            self._node.removeEventListener(\"error\", self._errorFn, false);\n        },\n        /**\n     * HTML5 Audio canplaythrough listener callback.\n     */ _loadListener: function() {\n            var self = this;\n            var parent = self._parent;\n            // Round up the duration to account for the lower precision in HTML5 Audio.\n            parent._duration = Math.ceil(self._node.duration * 10) / 10;\n            // Setup a sprite if none is defined.\n            if (Object.keys(parent._sprite).length === 0) parent._sprite = {\n                __default: [\n                    0,\n                    parent._duration * 1000\n                ]\n            };\n            if (parent._state !== \"loaded\") {\n                parent._state = \"loaded\";\n                parent._emit(\"load\");\n                parent._loadQueue();\n            }\n            // Clear the event listener.\n            self._node.removeEventListener(Howler1._canPlayEvent, self._loadFn, false);\n        },\n        /**\n     * HTML5 Audio ended listener callback.\n     */ _endListener: function() {\n            var self = this;\n            var parent = self._parent;\n            // Only handle the `ended`` event if the duration is Infinity.\n            if (parent._duration === Infinity) {\n                // Update the parent duration to match the real audio duration.\n                // Round up the duration to account for the lower precision in HTML5 Audio.\n                parent._duration = Math.ceil(self._node.duration * 10) / 10;\n                // Update the sprite that corresponds to the real duration.\n                if (parent._sprite.__default[1] === Infinity) parent._sprite.__default[1] = parent._duration * 1000;\n                // Run the regular ended method.\n                parent._ended(self);\n            }\n            // Clear the event listener since the duration is now correct.\n            self._node.removeEventListener(\"ended\", self._endFn, false);\n        }\n    };\n    /** Helper Methods **/ /***************************************************************************/ var cache = {};\n    /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */ var loadBuffer = function(self) {\n        var url = self._src;\n        // Check if the buffer has already been cached and use it instead.\n        if (cache[url]) {\n            // Set the duration from the cache.\n            self._duration = cache[url].duration;\n            // Load the sound into this Howl.\n            loadSound(self);\n            return;\n        }\n        if (/^data:[^;]+;base64,/.test(url)) {\n            // Decode the base64 data URI without XHR, since some browsers don't support it.\n            var data = atob(url.split(\",\")[1]);\n            var dataView = new Uint8Array(data.length);\n            for(var i = 0; i < data.length; ++i)dataView[i] = data.charCodeAt(i);\n            decodeAudioData(dataView.buffer, self);\n        } else {\n            // Load the buffer from the URL.\n            var xhr = new XMLHttpRequest();\n            xhr.open(self._xhr.method, url, true);\n            xhr.withCredentials = self._xhr.withCredentials;\n            xhr.responseType = \"arraybuffer\";\n            // Apply any custom headers to the request.\n            if (self._xhr.headers) Object.keys(self._xhr.headers).forEach(function(key) {\n                xhr.setRequestHeader(key, self._xhr.headers[key]);\n            });\n            xhr.onload = function() {\n                // Make sure we get a successful response back.\n                var code = (xhr.status + \"\")[0];\n                if (code !== \"0\" && code !== \"2\" && code !== \"3\") {\n                    self._emit(\"loaderror\", null, \"Failed loading audio file with status: \" + xhr.status + \".\");\n                    return;\n                }\n                decodeAudioData(xhr.response, self);\n            };\n            xhr.onerror = function() {\n                // If there is an error, switch to HTML5 Audio.\n                if (self._webAudio) {\n                    self._html5 = true;\n                    self._webAudio = false;\n                    self._sounds = [];\n                    delete cache[url];\n                    self.load();\n                }\n            };\n            safeXhrSend(xhr);\n        }\n    };\n    /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */ var safeXhrSend = function(xhr) {\n        try {\n            xhr.send();\n        } catch (e) {\n            xhr.onerror();\n        }\n    };\n    /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */ var decodeAudioData = function(arraybuffer, self) {\n        // Fire a load error if something broke.\n        var error = function() {\n            self._emit(\"loaderror\", null, \"Decoding audio data failed.\");\n        };\n        // Load the sound on success.\n        var success = function(buffer) {\n            if (buffer && self._sounds.length > 0) {\n                cache[self._src] = buffer;\n                loadSound(self, buffer);\n            } else error();\n        };\n        // Decode the buffer into an audio source.\n        if (typeof Promise !== \"undefined\" && Howler1.ctx.decodeAudioData.length === 1) Howler1.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n        else Howler1.ctx.decodeAudioData(arraybuffer, success, error);\n    };\n    /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */ var loadSound = function(self, buffer) {\n        // Set the duration.\n        if (buffer && !self._duration) self._duration = buffer.duration;\n        // Setup a sprite if none is defined.\n        if (Object.keys(self._sprite).length === 0) self._sprite = {\n            __default: [\n                0,\n                self._duration * 1000\n            ]\n        };\n        // Fire the loaded event.\n        if (self._state !== \"loaded\") {\n            self._state = \"loaded\";\n            self._emit(\"load\");\n            self._loadQueue();\n        }\n    };\n    /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */ var setupAudioContext = function() {\n        // If we have already detected that Web Audio isn't supported, don't run this step again.\n        if (!Howler1.usingWebAudio) return;\n        // Check if we are using Web Audio and setup the AudioContext if we are.\n        try {\n            if (typeof AudioContext !== \"undefined\") Howler1.ctx = new AudioContext();\n            else if (typeof webkitAudioContext !== \"undefined\") Howler1.ctx = new webkitAudioContext();\n            else Howler1.usingWebAudio = false;\n        } catch (e) {\n            Howler1.usingWebAudio = false;\n        }\n        // If the audio context creation still failed, set using web audio to false.\n        if (!Howler1.ctx) Howler1.usingWebAudio = false;\n        // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n        // If it is, disable Web Audio as it causes crashing.\n        var iOS = /iP(hone|od|ad)/.test(Howler1._navigator && Howler1._navigator.platform);\n        var appVersion = Howler1._navigator && Howler1._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n        var version = appVersion ? parseInt(appVersion[1], 10) : null;\n        if (iOS && version && version < 9) {\n            var safari = /safari/.test(Howler1._navigator && Howler1._navigator.userAgent.toLowerCase());\n            if (Howler1._navigator && !safari) Howler1.usingWebAudio = false;\n        }\n        // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n        if (Howler1.usingWebAudio) {\n            Howler1.masterGain = typeof Howler1.ctx.createGain === \"undefined\" ? Howler1.ctx.createGainNode() : Howler1.ctx.createGain();\n            Howler1.masterGain.gain.setValueAtTime(Howler1._muted ? 0 : Howler1._volume, Howler1.ctx.currentTime);\n            Howler1.masterGain.connect(Howler1.ctx.destination);\n        }\n        // Re-run the setup on Howler.\n        Howler1._setup();\n    };\n    // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n    if (typeof define === \"function\" && define.amd) define([], function() {\n        return {\n            Howler: Howler1,\n            Howl: Howl1\n        };\n    });\n    $f89d8ffbdc18f2ab$export$c9d39ca3bcd93abb = Howler1;\n    $f89d8ffbdc18f2ab$export$b791fe48eec8032a = Howl1;\n    // Add to global in Node.js (for testing, etc).\n    if (typeof $parcel$global !== \"undefined\") {\n        $parcel$global.HowlerGlobal = HowlerGlobal1;\n        $parcel$global.Howler = Howler1;\n        $parcel$global.Howl = Howl1;\n        $parcel$global.Sound = Sound1;\n    } else if (typeof window !== \"undefined\") {\n        window.HowlerGlobal = HowlerGlobal1;\n        window.Howler = Howler1;\n        window.Howl = Howl1;\n        window.Sound = Sound1;\n    }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */ (function() {\n    \"use strict\";\n    // Setup default properties.\n    HowlerGlobal.prototype._pos = [\n        0,\n        0,\n        0\n    ];\n    HowlerGlobal.prototype._orientation = [\n        0,\n        0,\n        -1,\n        0,\n        1,\n        0\n    ];\n    /** Global Methods **/ /***************************************************************************/ /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */ HowlerGlobal.prototype.stereo = function(pan) {\n        var self = this;\n        // Stop right here if not using Web Audio.\n        if (!self.ctx || !self.ctx.listener) return self;\n        // Loop through all Howls and update their stereo panning.\n        for(var i = self._howls.length - 1; i >= 0; i--)self._howls[i].stereo(pan);\n        return self;\n    };\n    /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */ HowlerGlobal.prototype.pos = function(x, y, z) {\n        var self = this;\n        // Stop right here if not using Web Audio.\n        if (!self.ctx || !self.ctx.listener) return self;\n        // Set the defaults for optional 'y' & 'z'.\n        y = typeof y !== \"number\" ? self._pos[1] : y;\n        z = typeof z !== \"number\" ? self._pos[2] : z;\n        if (typeof x === \"number\") {\n            self._pos = [\n                x,\n                y,\n                z\n            ];\n            if (typeof self.ctx.listener.positionX !== \"undefined\") {\n                self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n            } else self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n        } else return self._pos;\n        return self;\n    };\n    /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */ HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n        var self = this;\n        // Stop right here if not using Web Audio.\n        if (!self.ctx || !self.ctx.listener) return self;\n        // Set the defaults for optional 'y' & 'z'.\n        var or = self._orientation;\n        y = typeof y !== \"number\" ? or[1] : y;\n        z = typeof z !== \"number\" ? or[2] : z;\n        xUp = typeof xUp !== \"number\" ? or[3] : xUp;\n        yUp = typeof yUp !== \"number\" ? or[4] : yUp;\n        zUp = typeof zUp !== \"number\" ? or[5] : zUp;\n        if (typeof x === \"number\") {\n            self._orientation = [\n                x,\n                y,\n                z,\n                xUp,\n                yUp,\n                zUp\n            ];\n            if (typeof self.ctx.listener.forwardX !== \"undefined\") {\n                self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n                self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n            } else self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n        } else return or;\n        return self;\n    };\n    /** Group Methods **/ /***************************************************************************/ /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */ Howl.prototype.init = function(_super) {\n        return function(o) {\n            var self = this;\n            // Setup user-defined default properties.\n            self._orientation = o.orientation || [\n                1,\n                0,\n                0\n            ];\n            self._stereo = o.stereo || null;\n            self._pos = o.pos || null;\n            self._pannerAttr = {\n                coneInnerAngle: typeof o.coneInnerAngle !== \"undefined\" ? o.coneInnerAngle : 360,\n                coneOuterAngle: typeof o.coneOuterAngle !== \"undefined\" ? o.coneOuterAngle : 360,\n                coneOuterGain: typeof o.coneOuterGain !== \"undefined\" ? o.coneOuterGain : 0,\n                distanceModel: typeof o.distanceModel !== \"undefined\" ? o.distanceModel : \"inverse\",\n                maxDistance: typeof o.maxDistance !== \"undefined\" ? o.maxDistance : 10000,\n                panningModel: typeof o.panningModel !== \"undefined\" ? o.panningModel : \"HRTF\",\n                refDistance: typeof o.refDistance !== \"undefined\" ? o.refDistance : 1,\n                rolloffFactor: typeof o.rolloffFactor !== \"undefined\" ? o.rolloffFactor : 1\n            };\n            // Setup event listeners.\n            self._onstereo = o.onstereo ? [\n                {\n                    fn: o.onstereo\n                }\n            ] : [];\n            self._onpos = o.onpos ? [\n                {\n                    fn: o.onpos\n                }\n            ] : [];\n            self._onorientation = o.onorientation ? [\n                {\n                    fn: o.onorientation\n                }\n            ] : [];\n            // Complete initilization with howler.js core's init function.\n            return _super.call(this, o);\n        };\n    }(Howl.prototype.init);\n    /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */ Howl.prototype.stereo = function(pan, id) {\n        var self = this;\n        // Stop right here if not using Web Audio.\n        if (!self._webAudio) return self;\n        // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n        if (self._state !== \"loaded\") {\n            self._queue.push({\n                event: \"stereo\",\n                action: function() {\n                    self.stereo(pan, id);\n                }\n            });\n            return self;\n        }\n        // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n        var pannerType = typeof Howler.ctx.createStereoPanner === \"undefined\" ? \"spatial\" : \"stereo\";\n        // Setup the group's stereo panning if no ID is passed.\n        if (typeof id === \"undefined\") {\n            // Return the group's stereo panning if no parameters are passed.\n            if (typeof pan === \"number\") {\n                self._stereo = pan;\n                self._pos = [\n                    pan,\n                    0,\n                    0\n                ];\n            } else return self._stereo;\n        }\n        // Change the streo panning of one or all sounds in group.\n        var ids = self._getSoundIds(id);\n        for(var i = 0; i < ids.length; i++){\n            // Get the sound.\n            var sound = self._soundById(ids[i]);\n            if (sound) {\n                if (typeof pan === \"number\") {\n                    sound._stereo = pan;\n                    sound._pos = [\n                        pan,\n                        0,\n                        0\n                    ];\n                    if (sound._node) {\n                        // If we are falling back, make sure the panningModel is equalpower.\n                        sound._pannerAttr.panningModel = \"equalpower\";\n                        // Check if there is a panner setup and create a new one if not.\n                        if (!sound._panner || !sound._panner.pan) setupPanner(sound, pannerType);\n                        if (pannerType === \"spatial\") {\n                            if (typeof sound._panner.positionX !== \"undefined\") {\n                                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n                            } else sound._panner.setPosition(pan, 0, 0);\n                        } else sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n                    }\n                    self._emit(\"stereo\", sound._id);\n                } else return sound._stereo;\n            }\n        }\n        return self;\n    };\n    /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */ Howl.prototype.pos = function(x, y, z, id) {\n        var self = this;\n        // Stop right here if not using Web Audio.\n        if (!self._webAudio) return self;\n        // If the sound hasn't loaded, add it to the load queue to change position when capable.\n        if (self._state !== \"loaded\") {\n            self._queue.push({\n                event: \"pos\",\n                action: function() {\n                    self.pos(x, y, z, id);\n                }\n            });\n            return self;\n        }\n        // Set the defaults for optional 'y' & 'z'.\n        y = typeof y !== \"number\" ? 0 : y;\n        z = typeof z !== \"number\" ? -0.5 : z;\n        // Setup the group's spatial position if no ID is passed.\n        if (typeof id === \"undefined\") {\n            // Return the group's spatial position if no parameters are passed.\n            if (typeof x === \"number\") self._pos = [\n                x,\n                y,\n                z\n            ];\n            else return self._pos;\n        }\n        // Change the spatial position of one or all sounds in group.\n        var ids = self._getSoundIds(id);\n        for(var i = 0; i < ids.length; i++){\n            // Get the sound.\n            var sound = self._soundById(ids[i]);\n            if (sound) {\n                if (typeof x === \"number\") {\n                    sound._pos = [\n                        x,\n                        y,\n                        z\n                    ];\n                    if (sound._node) {\n                        // Check if there is a panner setup and create a new one if not.\n                        if (!sound._panner || sound._panner.pan) setupPanner(sound, \"spatial\");\n                        if (typeof sound._panner.positionX !== \"undefined\") {\n                            sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n                            sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n                            sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n                        } else sound._panner.setPosition(x, y, z);\n                    }\n                    self._emit(\"pos\", sound._id);\n                } else return sound._pos;\n            }\n        }\n        return self;\n    };\n    /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */ Howl.prototype.orientation = function(x, y, z, id) {\n        var self = this;\n        // Stop right here if not using Web Audio.\n        if (!self._webAudio) return self;\n        // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n        if (self._state !== \"loaded\") {\n            self._queue.push({\n                event: \"orientation\",\n                action: function() {\n                    self.orientation(x, y, z, id);\n                }\n            });\n            return self;\n        }\n        // Set the defaults for optional 'y' & 'z'.\n        y = typeof y !== \"number\" ? self._orientation[1] : y;\n        z = typeof z !== \"number\" ? self._orientation[2] : z;\n        // Setup the group's spatial orientation if no ID is passed.\n        if (typeof id === \"undefined\") {\n            // Return the group's spatial orientation if no parameters are passed.\n            if (typeof x === \"number\") self._orientation = [\n                x,\n                y,\n                z\n            ];\n            else return self._orientation;\n        }\n        // Change the spatial orientation of one or all sounds in group.\n        var ids = self._getSoundIds(id);\n        for(var i = 0; i < ids.length; i++){\n            // Get the sound.\n            var sound = self._soundById(ids[i]);\n            if (sound) {\n                if (typeof x === \"number\") {\n                    sound._orientation = [\n                        x,\n                        y,\n                        z\n                    ];\n                    if (sound._node) {\n                        // Check if there is a panner setup and create a new one if not.\n                        if (!sound._panner) {\n                            // Make sure we have a position to setup the node with.\n                            if (!sound._pos) sound._pos = self._pos || [\n                                0,\n                                0,\n                                -0.5\n                            ];\n                            setupPanner(sound, \"spatial\");\n                        }\n                        if (typeof sound._panner.orientationX !== \"undefined\") {\n                            sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n                            sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n                            sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n                        } else sound._panner.setOrientation(x, y, z);\n                    }\n                    self._emit(\"orientation\", sound._id);\n                } else return sound._orientation;\n            }\n        }\n        return self;\n    };\n    /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */ Howl.prototype.pannerAttr = function() {\n        var self = this;\n        var args = arguments;\n        var o, id, sound;\n        // Stop right here if not using Web Audio.\n        if (!self._webAudio) return self;\n        // Determine the values based on arguments.\n        if (args.length === 0) // Return the group's panner attribute values.\n        return self._pannerAttr;\n        else if (args.length === 1) {\n            if (typeof args[0] === \"object\") {\n                o = args[0];\n                // Set the grou's panner attribute values.\n                if (typeof id === \"undefined\") {\n                    if (!o.pannerAttr) o.pannerAttr = {\n                        coneInnerAngle: o.coneInnerAngle,\n                        coneOuterAngle: o.coneOuterAngle,\n                        coneOuterGain: o.coneOuterGain,\n                        distanceModel: o.distanceModel,\n                        maxDistance: o.maxDistance,\n                        refDistance: o.refDistance,\n                        rolloffFactor: o.rolloffFactor,\n                        panningModel: o.panningModel\n                    };\n                    self._pannerAttr = {\n                        coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== \"undefined\" ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n                        coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== \"undefined\" ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n                        coneOuterGain: typeof o.pannerAttr.coneOuterGain !== \"undefined\" ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n                        distanceModel: typeof o.pannerAttr.distanceModel !== \"undefined\" ? o.pannerAttr.distanceModel : self._distanceModel,\n                        maxDistance: typeof o.pannerAttr.maxDistance !== \"undefined\" ? o.pannerAttr.maxDistance : self._maxDistance,\n                        refDistance: typeof o.pannerAttr.refDistance !== \"undefined\" ? o.pannerAttr.refDistance : self._refDistance,\n                        rolloffFactor: typeof o.pannerAttr.rolloffFactor !== \"undefined\" ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n                        panningModel: typeof o.pannerAttr.panningModel !== \"undefined\" ? o.pannerAttr.panningModel : self._panningModel\n                    };\n                }\n            } else {\n                // Return this sound's panner attribute values.\n                sound = self._soundById(parseInt(args[0], 10));\n                return sound ? sound._pannerAttr : self._pannerAttr;\n            }\n        } else if (args.length === 2) {\n            o = args[0];\n            id = parseInt(args[1], 10);\n        }\n        // Update the values of the specified sounds.\n        var ids = self._getSoundIds(id);\n        for(var i = 0; i < ids.length; i++){\n            sound = self._soundById(ids[i]);\n            if (sound) {\n                // Merge the new values into the sound.\n                var pa = sound._pannerAttr;\n                pa = {\n                    coneInnerAngle: typeof o.coneInnerAngle !== \"undefined\" ? o.coneInnerAngle : pa.coneInnerAngle,\n                    coneOuterAngle: typeof o.coneOuterAngle !== \"undefined\" ? o.coneOuterAngle : pa.coneOuterAngle,\n                    coneOuterGain: typeof o.coneOuterGain !== \"undefined\" ? o.coneOuterGain : pa.coneOuterGain,\n                    distanceModel: typeof o.distanceModel !== \"undefined\" ? o.distanceModel : pa.distanceModel,\n                    maxDistance: typeof o.maxDistance !== \"undefined\" ? o.maxDistance : pa.maxDistance,\n                    refDistance: typeof o.refDistance !== \"undefined\" ? o.refDistance : pa.refDistance,\n                    rolloffFactor: typeof o.rolloffFactor !== \"undefined\" ? o.rolloffFactor : pa.rolloffFactor,\n                    panningModel: typeof o.panningModel !== \"undefined\" ? o.panningModel : pa.panningModel\n                };\n                // Update the panner values or create a new panner if none exists.\n                var panner = sound._panner;\n                if (panner) {\n                    panner.coneInnerAngle = pa.coneInnerAngle;\n                    panner.coneOuterAngle = pa.coneOuterAngle;\n                    panner.coneOuterGain = pa.coneOuterGain;\n                    panner.distanceModel = pa.distanceModel;\n                    panner.maxDistance = pa.maxDistance;\n                    panner.refDistance = pa.refDistance;\n                    panner.rolloffFactor = pa.rolloffFactor;\n                    panner.panningModel = pa.panningModel;\n                } else {\n                    // Make sure we have a position to setup the node with.\n                    if (!sound._pos) sound._pos = self._pos || [\n                        0,\n                        0,\n                        -0.5\n                    ];\n                    // Create a new panner node.\n                    setupPanner(sound, \"spatial\");\n                }\n            }\n        }\n        return self;\n    };\n    /** Single Sound Methods **/ /***************************************************************************/ /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */ Sound.prototype.init = function(_super) {\n        return function() {\n            var self = this;\n            var parent = self._parent;\n            // Setup user-defined default properties.\n            self._orientation = parent._orientation;\n            self._stereo = parent._stereo;\n            self._pos = parent._pos;\n            self._pannerAttr = parent._pannerAttr;\n            // Complete initilization with howler.js core Sound's init function.\n            _super.call(this);\n            // If a stereo or position was specified, set it up.\n            if (self._stereo) parent.stereo(self._stereo);\n            else if (self._pos) parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n        };\n    }(Sound.prototype.init);\n    /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */ Sound.prototype.reset = function(_super) {\n        return function() {\n            var self = this;\n            var parent = self._parent;\n            // Reset all spatial plugin properties on this sound.\n            self._orientation = parent._orientation;\n            self._stereo = parent._stereo;\n            self._pos = parent._pos;\n            self._pannerAttr = parent._pannerAttr;\n            // If a stereo or position was specified, set it up.\n            if (self._stereo) parent.stereo(self._stereo);\n            else if (self._pos) parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n            else if (self._panner) {\n                // Disconnect the panner.\n                self._panner.disconnect(0);\n                self._panner = undefined;\n                parent._refreshBuffer(self);\n            }\n            // Complete resetting of the sound.\n            return _super.call(this);\n        };\n    }(Sound.prototype.reset);\n    /** Helper Methods **/ /***************************************************************************/ /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */ var setupPanner = function(sound, type) {\n        type = type || \"spatial\";\n        // Create the new panner node.\n        if (type === \"spatial\") {\n            sound._panner = Howler.ctx.createPanner();\n            sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n            sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n            sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n            sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n            sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n            sound._panner.refDistance = sound._pannerAttr.refDistance;\n            sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n            sound._panner.panningModel = sound._pannerAttr.panningModel;\n            if (typeof sound._panner.positionX !== \"undefined\") {\n                sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n            } else sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n            if (typeof sound._panner.orientationX !== \"undefined\") {\n                sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n                sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n                sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n            } else sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n        } else {\n            sound._panner = Howler.ctx.createStereoPanner();\n            sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n        }\n        sound._panner.connect(sound._node);\n        // Update the connections.\n        if (!sound._paused) sound._parent.pause(sound._id, true).play(sound._id, true);\n    };\n})();\n\n\nvar $c3c2734100377a06$var$music = {\n    sound: null,\n    init () {\n        this.sound = new (0, $f89d8ffbdc18f2ab$export$b791fe48eec8032a)({\n            src: [\n                \"musicBackground/0.mp3\"\n            ],\n            volume: 0.2,\n            loop: true\n        });\n        console.log(this.sound);\n    },\n    play () {\n        console.log(this);\n        this.sound.play();\n    }\n};\n$c3c2734100377a06$var$music.init();\n$c3c2734100377a06$var$music.play.bind($c3c2734100377a06$var$music);\n\n\n//# sourceMappingURL=index.3624fb1f.js.map\n","import {Howl, Howler} from 'howler';\n\n\nvar music = {\n\tsound: null,\n\tinit()\n\t{\n\t\tthis.sound = new Howl({\n\t\t\tsrc: ['musicBackground/0.mp3'],\n\t\t\tvolume: 0.2,\n\t\t\tloop: true,\n\t\t});\n\n\t\tconsole.log(this.sound);\n\t},\n\tplay()\n\t{\n\t\tconsole.log(this);\n\t\tthis.sound.play();\n\t},\n\n}\nmusic.init();\nmusic.play.bind(music);\n","/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"names":["HowlerGlobal1","Howler1","Howl1","Sound1","cache","loadBuffer","safeXhrSend","decodeAudioData","loadSound","setupAudioContext","_super","setupPanner","$parcel$global","globalThis","self","window","global","init","prototype","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","ua","userAgent","checkOpera","match","isOldOpera","parseInt","split","checkSafari","indexOf","safariVersion","isOldSafari","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","str","url","exec","toLowerCase","location","protocol","slice","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","data","atob","dataView","Uint8Array","charCodeAt","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","define","amd","Howler","Howl","HowlerGlobal","Sound","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","$c3c2734100377a06$var$music","log"],"version":3,"file":"index.3624fb1f.js.map"}